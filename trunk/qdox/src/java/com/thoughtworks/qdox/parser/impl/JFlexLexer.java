/* The following code was generated by JFlex 1.3.5 on 07/09/02 16:42 */

// class headers
package com.thoughtworks.qdox.parser.impl;
import com.thoughtworks.qdox.parser.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 07/09/02 16:42 from the specification file
 * <tt>file:/C:/dev/qdox/src/grammar/lexer.flex</tt>
 */
public class JFlexLexer implements Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int MULTILINECOMMENT = 7;
  final public static int ASSIGNMENT = 3;
  final public static int STRING = 4;
  final public static int CODEBLOCK = 2;
  final public static int YYINITIAL = 0;
  final public static int SINGLELINECOMMENT = 6;
  final public static int CHAR = 5;
  final public static int JAVADOC = 1;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\51\1\47\2\0\1\46\22\0\1\51\1\0\1\52\4\0"+
    "\1\53\1\37\1\40\1\4\1\0\1\3\1\0\1\2\1\43\12\45"+
    "\1\0\1\1\1\0\1\44\2\0\1\50\32\45\1\35\1\54\1\36"+
    "\1\0\1\45\1\0\1\6\1\21\1\7\1\23\1\12\1\26\1\11"+
    "\1\31\1\13\1\45\1\10\1\22\1\14\1\27\1\15\1\5\1\45"+
    "\1\16\1\25\1\17\1\20\1\24\1\33\1\34\1\30\1\32\1\41"+
    "\1\0\1\42\uff82\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    45,    90,   135,   180,   225,   270,   315,   360,   360, 
      360,   360,   360,   405,   450,   495,   540,   585,   630,   675, 
      720,   765,   810,   855,   360,   360,   360,   360,   360,   360, 
      900,   360,   360,   360,   945,   990,  1035,   360,   360,   360, 
      360,  1080,   360,   360,   360,  1125,  1170,  1215,  1260,  1305, 
     1350,  1395,  1440,  1485,  1530,  1575,  1620,  1665,  1710,  1755, 
     1800,  1845,  1890,  1935,  1980,   360,   360,   360,  2025,  2070, 
     2115,  2160,  2205,  2250,  2295,  2340,  2385,  2430,  2475,  2520, 
     2565,  2610,  2655,  2700,  2745,   360,  2790,  2835,  2880,  2925, 
     2970,  3015,  3060,  3105,  3150,  3195,  3240,  3285,  3330,  3375, 
     3420,  3465,  3510,  3555,  3600,  3645,  3690,  3735,  3780,   540, 
     3825,  3870,  3915,  3960,  4005,  4050,  4095,  4140,  4185,  4230, 
      540,  4275,  4320,  4365,  4410,   540,  4455,  4500,   540,  4545, 
     4590,  4635,   540,  4680,   540,  4725,  4770,   540,   540,   540, 
     4815,  4860,   540,  4905,  4950,  4995,  5040,  5085,  5130,  5175, 
      540,  5220,  5265,  5310,   540,   540,  5355,   540,  5400,   540, 
      540,  5445,   540,  5490,  5535,   540
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\2\21\1\22\1\23\3\21\1\24\4\21\1\25\1\26"+
    "\1\27\1\30\5\21\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\21\4\11\1\41\1\42\1\11"+
    "\4\43\1\44\41\43\1\45\1\46\1\47\1\11\3\43"+
    "\41\11\1\50\1\51\1\52\6\11\1\41\1\42\2\11"+
    "\1\53\37\11\1\50\1\54\1\52\6\11\1\41\1\42"+
    "\53\11\1\55\1\11\1\56\53\11\1\55\1\57\46\11"+
    "\1\60\1\55\11\11\1\61\50\11\62\0\1\21\1\62"+
    "\7\21\1\63\1\21\1\64\14\21\10\0\1\21\14\0"+
    "\14\21\1\65\13\21\10\0\1\21\14\0\15\21\1\66"+
    "\12\21\10\0\1\21\14\0\30\21\10\0\1\21\14\0"+
    "\27\21\1\67\10\0\1\21\14\0\7\21\1\70\12\21"+
    "\1\71\5\21\10\0\1\21\14\0\11\21\1\72\12\21"+
    "\1\73\3\21\10\0\1\21\14\0\10\21\1\74\17\21"+
    "\10\0\1\21\14\0\12\21\1\75\10\21\1\76\4\21"+
    "\10\0\1\21\14\0\6\21\1\77\21\21\10\0\1\21"+
    "\14\0\1\21\1\100\26\21\10\0\1\21\13\0\1\101"+
    "\36\0\1\102\11\0\4\43\1\0\41\43\2\0\1\43"+
    "\1\0\3\43\43\0\1\103\60\0\1\46\11\0\1\104"+
    "\36\0\1\102\63\0\1\11\1\0\1\11\53\0\2\11"+
    "\47\0\1\55\50\0\1\55\16\0\2\21\1\105\25\21"+
    "\10\0\1\21\14\0\6\21\1\106\1\21\1\107\17\21"+
    "\10\0\1\21\14\0\14\21\1\110\13\21\10\0\1\21"+
    "\14\0\20\21\1\111\7\21\10\0\1\21\14\0\1\21"+
    "\1\112\26\21\10\0\1\21\14\0\12\21\1\113\15\21"+
    "\10\0\1\21\14\0\1\114\27\21\10\0\1\21\14\0"+
    "\12\21\1\115\15\21\10\0\1\21\14\0\1\21\1\116"+
    "\26\21\10\0\1\21\14\0\11\21\1\117\16\21\10\0"+
    "\1\21\14\0\15\21\1\120\12\21\10\0\1\21\14\0"+
    "\1\21\1\121\7\21\1\122\16\21\10\0\1\21\14\0"+
    "\22\21\1\123\5\21\10\0\1\21\14\0\22\21\1\124"+
    "\5\21\10\0\1\21\14\0\12\21\1\125\15\21\10\0"+
    "\1\21\13\0\1\126\55\0\3\21\1\127\24\21\10\0"+
    "\1\21\14\0\17\21\1\130\10\21\10\0\1\21\14\0"+
    "\12\21\1\131\15\21\10\0\1\21\14\0\15\21\1\132"+
    "\12\21\10\0\1\21\14\0\12\21\1\133\15\21\10\0"+
    "\1\21\14\0\20\21\1\134\7\21\10\0\1\21\14\0"+
    "\5\21\1\135\22\21\10\0\1\21\14\0\10\21\1\136"+
    "\4\21\1\137\12\21\10\0\1\21\14\0\5\21\1\140"+
    "\22\21\10\0\1\21\14\0\22\21\1\141\5\21\10\0"+
    "\1\21\14\0\10\21\1\142\17\21\10\0\1\21\14\0"+
    "\1\21\1\143\26\21\10\0\1\21\14\0\12\21\1\144"+
    "\15\21\10\0\1\21\14\0\6\21\1\145\21\21\10\0"+
    "\1\21\14\0\2\21\1\146\25\21\10\0\1\21\14\0"+
    "\1\21\1\147\26\21\10\0\1\21\14\0\6\21\1\150"+
    "\21\21\10\0\1\21\14\0\1\21\1\151\26\21\10\0"+
    "\1\21\14\0\1\21\1\152\26\21\10\0\1\21\14\0"+
    "\5\21\1\153\22\21\10\0\1\21\14\0\6\21\1\154"+
    "\21\21\10\0\1\21\14\0\11\21\1\155\16\21\10\0"+
    "\1\21\14\0\20\21\1\156\7\21\10\0\1\21\14\0"+
    "\22\21\1\157\5\21\10\0\1\21\14\0\11\21\1\160"+
    "\16\21\10\0\1\21\14\0\5\21\1\161\22\21\10\0"+
    "\1\21\14\0\11\21\1\162\16\21\10\0\1\21\14\0"+
    "\20\21\1\163\7\21\10\0\1\21\14\0\26\21\1\164"+
    "\1\21\10\0\1\21\14\0\12\21\1\165\15\21\10\0"+
    "\1\21\14\0\6\21\1\166\21\21\10\0\1\21\14\0"+
    "\2\21\1\167\25\21\10\0\1\21\14\0\24\21\1\170"+
    "\3\21\10\0\1\21\14\0\15\21\1\171\12\21\10\0"+
    "\1\21\14\0\17\21\1\172\10\21\10\0\1\21\14\0"+
    "\4\21\1\173\23\21\10\0\1\21\14\0\12\21\1\174"+
    "\15\21\10\0\1\21\14\0\2\21\1\175\25\21\10\0"+
    "\1\21\14\0\2\21\1\176\25\21\10\0\1\21\14\0"+
    "\1\21\1\177\26\21\10\0\1\21\14\0\16\21\1\200"+
    "\11\21\10\0\1\21\14\0\12\21\1\201\15\21\10\0"+
    "\1\21\14\0\7\21\1\202\20\21\10\0\1\21\14\0"+
    "\21\21\1\203\6\21\10\0\1\21\14\0\6\21\1\204"+
    "\21\21\10\0\1\21\14\0\20\21\1\205\7\21\10\0"+
    "\1\21\14\0\6\21\1\206\21\21\10\0\1\21\14\0"+
    "\2\21\1\207\25\21\10\0\1\21\14\0\12\21\1\210"+
    "\15\21\10\0\1\21\14\0\11\21\1\211\16\21\10\0"+
    "\1\21\14\0\5\21\1\212\22\21\10\0\1\21\14\0"+
    "\5\21\1\213\22\21\10\0\1\21\14\0\5\21\1\214"+
    "\22\21\10\0\1\21\14\0\12\21\1\215\15\21\10\0"+
    "\1\21\14\0\2\21\1\216\25\21\10\0\1\21\14\0"+
    "\20\21\1\217\7\21\10\0\1\21\14\0\5\21\1\220"+
    "\22\21\10\0\1\21\14\0\1\21\1\221\26\21\10\0"+
    "\1\21\14\0\5\21\1\222\22\21\10\0\1\21\14\0"+
    "\15\21\1\223\12\21\10\0\1\21\14\0\21\21\1\224"+
    "\6\21\10\0\1\21\14\0\10\21\1\225\17\21\10\0"+
    "\1\21\14\0\5\21\1\226\22\21\10\0\1\21\14\0"+
    "\12\21\1\227\15\21\10\0\1\21\14\0\22\21\1\230"+
    "\5\21\10\0\1\21\14\0\2\21\1\231\25\21\10\0"+
    "\1\21\14\0\22\21\1\232\5\21\10\0\1\21\14\0"+
    "\5\21\1\233\22\21\10\0\1\21\14\0\1\234\27\21"+
    "\10\0\1\21\14\0\22\21\1\235\5\21\10\0\1\21"+
    "\14\0\16\21\1\236\11\21\10\0\1\21\14\0\12\21"+
    "\1\237\15\21\10\0\1\21\14\0\5\21\1\240\22\21"+
    "\10\0\1\21\14\0\12\21\1\241\15\21\10\0\1\21"+
    "\14\0\6\21\1\242\21\21\10\0\1\21\14\0\20\21"+
    "\1\243\7\21\10\0\1\21\14\0\25\21\1\244\2\21"+
    "\10\0\1\21\14\0\5\21\1\245\22\21\10\0\1\21"+
    "\14\0\16\21\1\246\11\21\10\0\1\21\7\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  1,  9, 
     9,  9,  1,  1,  1,  9,  9,  9,  9,  1,  9,  9,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */

	private int parenDepth = 0, stateDepth = 0;
	private int[] stateStack = new int[2];
	private boolean javaDocNewLine;

	public String text() {
		return yytext();
	}

	public int lex() throws java.io.IOException {
		return yylex();
	}

	private void pushState(int newState) {
		stateStack[stateDepth++] = yy_lexical_state;
		yybegin(newState);
	}

	private void popState() {
		yybegin(stateStack[--stateDepth]);
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JFlexLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[5580];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 85: 
          {  pushState(JAVADOC); javaDocNewLine = true; return Parser.JAVADOCSTART;  }
        case 167: break;
        case 28: 
          { 
		parenDepth++;
		if (parenDepth == 2) {
			pushState(CODEBLOCK);
		}
		else {
			return Parser.PARENOPEN;
		}
	 }
        case 168: break;
        case 165: 
          {  return Parser.SYNCHRONIZED;  }
        case 169: break;
        case 34: 
          {  return Parser.JAVADOCTOKEN;  }
        case 170: break;
        case 27: 
          {  return Parser.BRACKETCLOSE;  }
        case 171: break;
        case 26: 
          {  return Parser.BRACKETOPEN;  }
        case 172: break;
        case 25: 
          {  return Parser.SQUARECLOSE;  }
        case 173: break;
        case 32: 
          {  pushState(STRING);  }
        case 174: break;
        case 42: 
          {  if (parenDepth <= 1) { popState(); return Parser.ASSIGNMENT; }  }
        case 175: break;
        case 8: 
        case 30: 
        case 35: 
        case 41: 
        case 45: 
        case 46: 
        case 48: 
          {   }
        case 176: break;
        case 66: 
          {  popState(); return Parser.JAVADOCEND;  }
        case 177: break;
        case 36: 
        case 37: 
          {  javaDocNewLine = true; return Parser.JAVADOCNEWLINE;  }
        case 178: break;
        case 11: 
          {  return Parser.COMMA;  }
        case 179: break;
        case 109: 
          {  return Parser.CLASS;  }
        case 180: break;
        case 120: 
          {  return Parser.FINAL;  }
        case 181: break;
        case 125: 
          {  return Parser.PUBLIC;  }
        case 182: break;
        case 128: 
          {  return Parser.IMPORT;  }
        case 183: break;
        case 132: 
          {  return Parser.THROWS;  }
        case 184: break;
        case 134: 
          {  return Parser.STATIC;  }
        case 185: break;
        case 137: 
          {  return Parser.NATIVE;  }
        case 186: break;
        case 162: 
          {  return Parser.IMPLEMENTS;  }
        case 187: break;
        case 160: 
          {  return Parser.TRANSIENT;  }
        case 188: break;
        case 159: 
          {  return Parser.INTERFACE;  }
        case 189: break;
        case 157: 
          {  return Parser.PROTECTED;  }
        case 190: break;
        case 0: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 126: 
        case 127: 
        case 129: 
        case 130: 
        case 131: 
        case 133: 
        case 135: 
        case 136: 
        case 140: 
        case 141: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 151: 
        case 152: 
        case 153: 
        case 156: 
        case 158: 
        case 161: 
        case 163: 
        case 164: 
          {  return Parser.IDENTIFIER;  }
        case 191: break;
        case 9: 
          {  return Parser.SEMI;  }
        case 192: break;
        case 10: 
          {  return Parser.DOT;  }
        case 193: break;
        case 12: 
          {  return Parser.STAR;  }
        case 194: break;
        case 24: 
          {  return Parser.SQUAREOPEN;  }
        case 195: break;
        case 38: 
          {  if (javaDocNewLine) return Parser.JAVADOCTAGMARK;  }
        case 196: break;
        case 29: 
          {  parenDepth--; return Parser.PARENCLOSE;  }
        case 197: break;
        case 155: 
          {  return Parser.STRICTFP;  }
        case 198: break;
        case 154: 
          {  return Parser.VOLATILE;  }
        case 199: break;
        case 150: 
          {  return Parser.ABSTRACT;  }
        case 200: break;
        case 142: 
          {  return Parser.EXTENDS;  }
        case 201: break;
        case 139: 
          {  return Parser.PRIVATE;  }
        case 202: break;
        case 138: 
          {  return Parser.PACKAGE;  }
        case 203: break;
        case 33: 
          {  pushState(CHAR);  }
        case 204: break;
        case 39: 
          {  parenDepth++;  }
        case 205: break;
        case 43: 
          {  parenDepth--;  }
        case 206: break;
        case 44: 
          {  popState();  }
        case 207: break;
        case 47: 
          {  popState();  }
        case 208: break;
        case 40: 
          { 
		parenDepth--;
		if (parenDepth == 1) {
			popState();
			return Parser.CODEBLOCK;
		}
	 }
        case 209: break;
        case 31: 
          {  pushState(ASSIGNMENT);  }
        case 210: break;
        case 65: 
          {  pushState(SINGLELINECOMMENT);  }
        case 211: break;
        case 64: 
        case 67: 
          {  pushState(MULTILINECOMMENT);  }
        case 212: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return 0; }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
